[{"C:\\Users\\antho\\Documents\\GitRepo\\spotify-app\\client\\src\\index.js":"1","C:\\Users\\antho\\Documents\\GitRepo\\spotify-app\\client\\src\\reportWebVitals.js":"2","C:\\Users\\antho\\Documents\\GitRepo\\spotify-app\\client\\src\\App.js":"3","C:\\Users\\antho\\Documents\\GitRepo\\spotify-app\\client\\src\\components\\playroom.component.js":"4","C:\\Users\\antho\\Documents\\GitRepo\\spotify-app\\client\\src\\components\\entry.component.js":"5","C:\\Users\\antho\\Documents\\GitRepo\\spotify-app\\client\\src\\components\\loadingPage.component.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":673,"mtime":1632205761584,"results":"10","hashOfConfig":"8"},{"size":10042,"mtime":1632370202685,"results":"11","hashOfConfig":"8"},{"size":6431,"mtime":1631849829505,"results":"12","hashOfConfig":"8"},{"size":3352,"mtime":1632371970295,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"13vpbmt",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"16"},"C:\\Users\\antho\\Documents\\GitRepo\\spotify-app\\client\\src\\index.js",[],["31","32"],"C:\\Users\\antho\\Documents\\GitRepo\\spotify-app\\client\\src\\reportWebVitals.js",[],"C:\\Users\\antho\\Documents\\GitRepo\\spotify-app\\client\\src\\App.js",[],"C:\\Users\\antho\\Documents\\GitRepo\\spotify-app\\client\\src\\components\\playroom.component.js",["33","34"],"import '../App.css';\r\nimport * as S from 'spotify-web-api-js';\r\nimport React, { Component } from 'react';\r\nimport SpotifyPlayer from 'react-spotify-web-playback';\r\nimport {io} from \"socket.io-client\";\r\nimport SoundOffTitle from '../SoundOffTitle.png';\r\n\r\nconst spotifyAPI = new S();\r\nvar socket;\r\n\r\nclass Playroom extends Component {\r\n  state = {};\r\n  constructor() {\r\n    super();\r\n    this.getPlaylistTracks = this.getPlaylistTracks.bind(this);\r\n    this.updateCurComment = this.updateCurComment.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.updateUserName = this.updateUserName.bind(this);\r\n    this.kd = this.kd.bind(this);\r\n    // const params = this.getHashParams();\r\n    // console.log(params);\r\n\r\n    this.state = {\r\n      // loggedIn: params.access_token? true : false,\r\n      nowPlaying: {\r\n        name: 'N/A',\r\n        image: ''\r\n      },\r\n      recents: [],\r\n      playlists: [],\r\n      currentPlaylist: '',\r\n      playlistTracks: [],\r\n      // accessToken: params.access_token? params.access_token : '',\r\n      currentURIs: [],\r\n      messages: [],\r\n      value: '',\r\n      username: '',\r\n      isPlaying: false,\r\n      roomID: '',\r\n      activeUsers: 0\r\n    };\r\n   \r\n    \r\n\r\n    // socket.on(\"message received\", data => {\r\n    //   console.log('Message received!', data);\r\n    //   this.state.messages.push(data);\r\n    //   this.setState({messages: this.state.messages});\r\n    // });\r\n    // socket.on(\"track update received\", data => {\r\n    //   console.log('received track update : ', data);\r\n    //   this.playTrack(data.uri);\r\n    // });\r\n    // socket.on(\"player update received\", data => {\r\n    //   console.log('received player update : ', data);\r\n    //   this.setState({isPlaying: data.isPlaying});\r\n    // });\r\n    \r\n  }\r\n\r\n  componentDidMount(){\r\n    // if(this.state.loggedIn) {\r\n    //   console.log('here');\r\n    console.log(this.props.location.state);\r\n    this.setState({\r\n        username: this.props.location.state.user\r\n      , accessToken: this.props.location.state.accessToken\r\n      , loggedIn: this.props.location.state.loggedIn\r\n      , roomID: this.props.location.state.id\r\n    });\r\n    spotifyAPI.setAccessToken(this.props.location.state.accessToken);\r\n    spotifyAPI.getUserPlaylists().then(res => { \r\n      console.log('playlists', res);\r\n      this.setState({playlists: res.items})\r\n      spotifyAPI.getPlaylist(res.items[0].id).then(res => {\r\n        console.log('Playlist Data', res);\r\n        this.setState({playlistTracks: res.tracks.items});\r\n      })\r\n    });\r\n    console.log(this.state.roomID);\r\n    socket = io(\"http://localhost:4001\",{\r\n      query: {\r\n        \"roomID\": this.props.location.state.id\r\n      }\r\n    });\r\n    socket.on(\"connect\", () => {\r\n      console.log(socket.id); \r\n  \r\n    });\r\n    socket.on(\"FromServer\", data => {\r\n      console.log(data);\r\n    });\r\n    socket.on(\"joined\", data => {\r\n      console.log(data);\r\n      this.setState({activeUsers: data});\r\n    });\r\n    socket.on(this.props.location.state.id, data => {\r\n      console.log(data);\r\n      if(data.type === 'message'){\r\n        let msg = {user: data.user, message: data.message};\r\n        this.state.messages.push(msg);\r\n        this.setState({messages: this.state.messages});\r\n      } else if(data.type === 'check'){\r\n        socket.emit(\"\")\r\n      }\r\n    });\r\n    // }\r\n  }\r\n  \r\n  getNowPlaying() {\r\n    spotifyAPI.getMyRecentlyPlayedTracks().then(res => {\r\n      console.log(res);\r\n      this.setState({recents: res.items})\r\n    })\r\n    // spotifyAPI.getNewReleases().then((res) => { console.log(res); });\r\n    spotifyAPI.getMyCurrentPlaybackState((err, value) => {\r\n      if(err){\r\n        console.log('ERROR', err);\r\n      } else {\r\n        console.log(value);\r\n        if(value.item) {\r\n          this.setState({\r\n            nowPlaying: {\r\n              name: value.item.name,\r\n              image: value.item.album.images[0]\r\n      \r\n            }\r\n          })\r\n        }\r\n      }\r\n    });\r\n  }\r\n  \r\n  getPlaylistTracks(ev) {\r\n    console.log(ev.target.value);\r\n    let id = ev.target.value;\r\n    spotifyAPI.getPlaylist(id).then(res => {\r\n      console.log('Playlist Data', res);\r\n      this.setState({playlistTracks: res.tracks.items});\r\n    })\r\n  }\r\n\r\n  playTrack(curURI){\r\n    this.setState({currentURIs: [curURI], isPlaying: true});\r\n  }\r\n\r\n  updateCurComment(comment){\r\n    // console.log(comment.target.value);\r\n    this.setState({value: comment.target.value});\r\n  }\r\n\r\n  handleSubmit(){\r\n    var newMessage = {user: this.state.username, message: this.state.value, id: this.state.roomID, time: new Date().toLocaleString()};\r\n    console.log(newMessage.time);\r\n    socket.emit(\"message\", newMessage);\r\n    this.state.messages.push(newMessage);\r\n    this.setState({messages: this.state.messages, value: ''});\r\n    // console.log(this.state.messages);\r\n  }\r\n\r\n  updateUserName(val) {\r\n    this.setState({username: val.target.value});\r\n  }\r\n\r\n  kd(ev) {\r\n    if(ev.key === 'Enter') {\r\n      this.handleSubmit();\r\n    }\r\n  }\r\n\r\n  playerUpdate(playerState) {\r\n    console.log('state', playerState.type);\r\n    if (playerState.type === 'track_update') {\r\n      socket.emit(\"track update\", playerState.track);\r\n      // this.playTrack(playerState.track)\r\n    } else if (playerState.type === 'player_update') {\r\n      socket.emit(\"player_update\", playerState);\r\n      this.setState({isPlaying: playerState.isPlaying});\r\n    } else if (playerState.type === 'status_update') {\r\n      // this.setState({isPlaying: true});\r\n    }\r\n  }\r\n\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {/* <a href=\"http://localhost:8888/login\">\r\n          <button>Login With Spotify</button>\r\n        </a> */}\r\n\r\n        {/* <input className=\"chatInput\" type=\"text\" onChange={this.updateUserName}/> */}\r\n        {/* <div>\r\n          Now Playing: {this.state.nowPlaying.name}\r\n        </div>\r\n        <div>\r\n          <img src={this.state.nowPlaying.image}/>\r\n        </div>\r\n\r\n        <button onClick={() => this.getNowPlaying()}>\r\n          Check Now Playing!\r\n        </button> */}\r\n\r\n       <div className=\"headerBar\" style={styles.headerBar}>\r\n         <img style={{height: '40px', marginTop: '5px', filter: 'invert(1)'}} src={SoundOffTitle}></img>\r\n         {/* <h1 style={{margin: '0px'}}>Sound<span style={{color: 'black'}}>Off</span></h1> */}\r\n         </div>\r\n       <div className=\"roomInfoContainer\">\r\n          <h3>Room ID: {this.state.roomID} </h3>\r\n          <h3>Active Users: {this.state.activeUsers} </h3> \r\n        </div>\r\n\r\n        <div style={{display:\"flex\", alignItems: 'center', justifyContent: 'center'}}>\r\n          <div className=\"playlistContainer\">\r\n            <div>\r\n              <select onChange={this.getPlaylistTracks}>\r\n                {this.state.playlists.map(ind => (\r\n                  <option value={ind.id}>{ind.name}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div style={{overflow: 'scroll', height: '90%'}}>\r\n              <ul style={{marginLeft: '0px'}}>\r\n                {this.state.playlistTracks.map(ind => (\r\n                  <li onClick={() => this.playTrack(ind.track.uri)} className={this.state.currentURIs[0] === ind.track.uri? \"playlistItemSelected\" : \"playlistItem\"}>\r\n                    <img style={{height: '100px', display: 'block'}} src={ind.track.album.images[0].url}/>\r\n                    <div style={{textAlign: 'initial', padding: '20px'}}>\r\n                      <div style={{display: 'table-row'}}>{ind.track.name}</div>\r\n                      <div style={{display: 'table-header-group', fontWeight: 'bold'}}>{ind.track.artists[0].name}</div>\r\n                    </div>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"chatContainer\">\r\n            <div className=\"messageWindow\">\r\n              {this.state.messages.map(message => (\r\n                <div><span style={{fontWeight: 'bold'}}>{message.user}</span>{': ' + message.message}</div>\r\n              ))}\r\n            </div>\r\n          \r\n            <input className=\"chatInput\" type=\"text\" value={this.state.value} onChange={this.updateCurComment} onKeyDown={this.kd}  />\r\n            <button className=\"chatSubmitButton\" onClick={this.handleSubmit}> {'>'} </button>\r\n          </div>\r\n        </div>\r\n        \r\n        { this.state.loggedIn && \r\n          <div style={{position: 'absolute', bottom: 0, width: '100vw', overflow: 'hidden'}}>\r\n            <SpotifyPlayer\r\n              play={this.state.isPlaying}\r\n              autoPlay={false}\r\n              token={this.state.accessToken}\r\n              uris={this.state.currentURIs}\r\n              styles={styles.playerStyle}\r\n              isPlaying={this.state.isPlaying}\r\n              callback={(state) => {this.playerUpdate(state);}}\r\n            />\r\n          </div>\r\n        }\r\n\r\n       \r\n        \r\n        {/* {this.state.recents.map(ind => ( */}\r\n        {/* {this.state.playlistTracks.map(ind => (\r\n          <div>\r\n            <img style={{height: '150px', display: 'block'}} src={ind.track.album.images[0].url}/>\r\n            <div style={{display: 'table-row'}}>{ind.track.name}</div>\r\n            <div style={{display: 'table-header-group', fontWeight: 'bold'}}>{ind.track.artists[0].name}</div>\r\n          </div>\r\n        ))} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet styles = {\r\n  playerStyle: {\r\n    activeColor: '#fff',\r\n    bgColor: 'var(--main-bg-color)',\r\n    color: 'whitesmoke',\r\n    loaderColor: '#fff',\r\n    sliderColor: 'var(--highlight-color)',//'#1cb954',\r\n    trackArtistColor: 'black',\r\n    trackNameColor: 'whitesmoke',\r\n    sliderHandleColor: 'var(--highlight-color)',//'#1cb954',\r\n    sliderHeight: 10,\r\n    height: 75,\r\n    boxShadow: 'rgb(119 119 119) 0px -1px 10px'\r\n  },\r\n  headerBar: {\r\n    margin: '0px',\r\n    background: 'var(--main-bg-color)',//'rgb(255 187 103)', // 'rgb(58 134 53)',\r\n    textAlign: 'center',\r\n    boxShadow: '0px 2px 5px rgb(119 119 119)',\r\n    marginBottom: '30px'\r\n  }\r\n}\r\n\r\nexport default Playroom;\r\n",["35","36"],"C:\\Users\\antho\\Documents\\GitRepo\\spotify-app\\client\\src\\components\\entry.component.js",["37","38","39"],"import '../App.css';\r\nimport React, { Component } from 'react';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {  withRouter } from \"react-router-dom\";\r\nimport yellow_flow from '../yellow_flow.mp4';\r\n\r\n\r\n\r\nfunction genID() {\r\n  var result = '';\r\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789';\r\n  var charactersLength = characters.length;\r\n  for ( var i = 0; i < 6; i++ ) {\r\n     result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n}\r\n\r\n\r\nconst ButtonTEST = withRouter(({ history, props }) => (\r\n  <button type='button' style={styles.submitButton}\r\n    onClick={async () => {\r\n      if(!props.user) {\r\n        alert(\"A valid username must be entered!\");\r\n      } else if(!props.accessToken) {\r\n        alert(\"No valid access token, please navigate back to the home screen.\");\r\n      } else {\r\n        if(!props.id) { \r\n          props.id = genID(); \r\n        }\r\n        // const requestOptions = {\r\n        //   method: 'POST',\r\n        //   headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*', \"mode\": \"no-cors\"},\r\n        //   body: JSON.stringify({ id: props.id })\r\n        // };\r\n        // let checkRoom = await fetch(\"http://localhost:4001/checkRoom\", requestOptions);\r\n        // if(checkRoom){\r\n        //   alert(\"Room ID already exists\");\r\n        // } else {\r\n          history.push('/room', props);\r\n        // }\r\n      }\r\n    }}\r\n  >\r\n    Start\r\n  </button>\r\n))\r\n\r\nclass Entry extends Component {\r\n  constructor() {\r\n    super();\r\n    this.changeOption = this.changeOption.bind(this);\r\n    this.updateUserName = this.updateUserName.bind(this);\r\n    this.updateRoomId = this.updateRoomId.bind(this);\r\n\r\n    const params = this.getHashParams();\r\n    this.state = {\r\n      loggedIn: params.access_token? true : false,\r\n      accessToken: params.access_token? params.access_token : '',\r\n      choice: 'create',\r\n      leftButtonStyle: styles.buttonGroupSelected,\r\n      rightButtonStyle: styles.buttonGroupButton,\r\n      id: null\r\n    };\r\n  }\r\n\r\n  getHashParams() {\r\n    var hashParams = {};\r\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\r\n        q = window.location.hash.substring(1);\r\n    while ( e = r.exec(q)) {\r\n    hashParams[e[1]] = decodeURIComponent(e[2]);\r\n    }\r\n    return hashParams;\r\n  }\r\n\r\n  changeOption(event, option){\r\n    console.log(event, option);\r\n    if(option !== null){\r\n      if(option === 'create') {\r\n        this.setState({choice: option, leftButtonStyle: styles.buttonGroupSelected, rightButtonStyle: styles.buttonGroupButton});\r\n      } else {\r\n        this.setState({choice: option, leftButtonStyle: styles.buttonGroupButton, rightButtonStyle: styles.buttonGroupSelected});\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  updateUserName(val) {\r\n    this.setState({username: val.target.value});\r\n  }\r\n\r\n  updateRoomId(val) {\r\n    this.setState({id: val.target.value});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\" style={styles.container}>\r\n        <video style={styles.bgVid} id=\"background-video\" muted={true} loop autoPlay>\r\n        <source src={yellow_flow} type=\"video/mp4\"/>\r\n        </video>\r\n        <div style={styles.optionsContainer}>\r\n          {/* <ToggleButtonGroup style={{justifyContent: 'center', marginTop: '30px'}}\r\n            value={this.state.choice}\r\n            exclusive\r\n            onChange={this.changeOption}\r\n            aria-label=\"text alignment\"\r\n            >\r\n            <ToggleButton style={this.state.leftButtonStyle} value=\"create\" aria-label=\"left aligned\">\r\n              Start a Room\r\n            </ToggleButton>\r\n            <ToggleButton style={this.state.rightButtonStyle} value=\"join\" aria-label=\"right aligned\">\r\n              Join a Room\r\n            </ToggleButton>\r\n          </ToggleButtonGroup> */}\r\n            {/* {this.state.choice === 'join' && */}\r\n              <div style={{marginTop: '100px'}}>\r\n                <TextField onChange={this.updateRoomId} style={{width: '450px'}} color=\"whitesmoke\" id=\"outlined-basic\" label=\"(Optional) Room Code to Join or Create\" variant=\"outlined\" />\r\n              </div>\r\n            {/* } */}\r\n            <div>\r\n              <TextField onChange={this.updateUserName} style={{width: '450px'}} color=\"whitesmoke\" id=\"outlined-basic\" label=\"Your Username\" variant=\"outlined\" />\r\n            </div>\r\n            {/* <a href=\"http://localhost:8888/login\"> */}\r\n            <div style={{justifyContent: 'flex-end', display: 'flex', flexDirection: 'column'}}>\r\n              <ButtonTEST props={{user: this.state.username, accessToken: this.state.accessToken, loggedIn: true, id: this.state.id}}></ButtonTEST>\r\n            </div>\r\n           \r\n        </div>\r\n      </div>\r\n    )};\r\n  }\r\n\r\n\r\n  var styles = {\r\n    container: {\r\n      alignContent: 'center',\r\n      textAlign: 'center',\r\n      fontFamily: 'DejaVu Sans Mono, monospace',\r\n      padding: '20px',\r\n    },\r\n    buttonGroupSelected: {\r\n      backgroundColor: '#099909',\r\n      fontWeight: 'bold',\r\n      color: 'whitesmoke',\r\n      width: '200px',\r\n      height: '60px'\r\n    },\r\n    buttonGroupButton:{\r\n      backgroundColor: 'lightgray',\r\n      fontWeight: 'bold',\r\n      color: 'black',\r\n      width: '200px',\r\n      height: '60px'\r\n    },\r\n    optionsContainer: {\r\n      width: '600px',\r\n      height: '600px',\r\n      backgroundColor: 'whitesmoke',\r\n      margin: 'auto',\r\n      padding: '20px',\r\n      borderRadius: '85px',\r\n      boxShadow: '-7px 7px 7px #696969',\r\n      flexDirection: 'column',\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n      marginTop: '100px',\r\n      position: 'absolute',\r\n      left: '50vw',\r\n      transform: 'translate(-300px, 0px)'\r\n    },\r\n    submitButton:{\r\n      margin: '20px',\r\n      border: '2px solid #099909',\r\n      backgroundColor: '#3a3938',\r\n      height: '70px',\r\n      width: '500px',\r\n      borderRadius: '25px',\r\n      fontWeight: 'bold',\r\n      color: 'whitesmoke',\r\n      fontSize: '25px',\r\n      fontFamily: 'system-ui',\r\n      display: 'block',\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n      textDecoration: 'none',\r\n      cursor: 'pointer'\r\n  },\r\n  bgVid: {\r\n    position: 'absolute',\r\n    left: '0px',\r\n    width: '100vw',\r\n    height: '100vh',\r\n    top: '0px',\r\n    objectFit: 'cover'\r\n  }\r\n  }\r\n  \r\n  export default Entry;","C:\\Users\\antho\\Documents\\GitRepo\\spotify-app\\client\\src\\components\\loadingPage.component.js",["40","41","42"],"import '../App.css';\r\nimport React, { Component } from 'react';\r\nimport sptfy from './spotify.png';\r\nimport red_flow from '../red_flow.mp4';\r\nimport {CSSTransition} from 'react-transition-group';\r\nimport SoundOffTitle from '../SoundOffTitle.png';\r\n\r\nclass LoadingPage extends Component {\r\n    state = {};\r\n\r\n    getHashParams() {\r\n        var hashParams = {};\r\n        var e, r = /([^&;=]+)=?([^&;]*)/g,\r\n            q = window.location.hash.substring(1);\r\n        while ( e = r.exec(q)) {\r\n        hashParams[e[1]] = decodeURIComponent(e[2]);\r\n        }\r\n        return hashParams;\r\n    }\r\n    \r\n\r\n    render(){\r\n        return(\r\n                <section id=\"openingPageSection\">\r\n                   \r\n                    <div style={styles.entryBanner}>\r\n                        <video style={styles.bgVid} id=\"background-video\" muted={true} loop autoPlay>\r\n                        <source src={red_flow} type=\"video/mp4\"/>\r\n                        </video>\r\n                        {/* <h1 style={styles.title}>Sound<span style={{color:'whitesmoke'}}>Off</span></h1>\r\n                        <hr/>\r\n                        <div style={{height: '350px'}}>\r\n                            <h2>Be a DJ for friends, family, or even strangers</h2>\r\n                            \r\n                        </div> \r\n                        <hr/>*/}\r\n                        <img style={{height: '50px', filter: 'invert(1)'}} src={SoundOffTitle}></img>\r\n                            {/* <a href=\"http://localhost:8888/login\"> */}\r\n                            <a href=\"https://sweet-stingray-73.loca.lt/login\">\r\n                                <button style={styles.loginButton}>\r\n                                    <img style={styles.buttonImage} src={sptfy} alt={\"sptfy\"}/>\r\n                                    Login With Spotify\r\n                                </button>\r\n                            </a>\r\n                    </div>\r\n                </section>\r\n        );\r\n    }\r\n}\r\n\r\nvar styles ={\r\n    entryBanner: {\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        width: '100vw',\r\n        height: '100px',\r\n        backgroundColor: 'none',\r\n        // borderRadius: '15px',\r\n        textAlign: 'center',\r\n        borderRadius: '85px',\r\n        marginTop: '45vh'\r\n    },\r\n    title: {\r\n        fontSize: '64px',\r\n        fontFamily: 'system-ui',\r\n        color: 'green',\r\n        marginTop: '15px',\r\n        marginBottom: '15px',\r\n    },\r\n    subTitle: {\r\n\r\n    },\r\n    loginButton:{\r\n        margin: '20px',\r\n        border: '2px solid #099909',\r\n        backgroundColor: '#3a3938',\r\n        height: '80px',\r\n        width: '350px',\r\n        borderRadius: '25px',\r\n        fontWeight: 'bold',\r\n        color: 'whitesmoke',\r\n        fontSize: '25px',\r\n        fontFamily: 'system-ui',\r\n        display: 'block',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        textDecoration: 'none',\r\n        cursor: 'pointer'\r\n    },\r\n    buttonImage: {\r\n        height: '40px',\r\n        width: '40px',\r\n        marginTop: '1',\r\n        verticalAlign: 'middle',\r\n        paddingRight: '30px',\r\n    },\r\n    bgVid: {\r\n        position: 'absolute',\r\n        left: '0px',\r\n        width: '100vw',\r\n        height: '100vh',\r\n        top: '0px',\r\n        objectFit: 'cover',\r\n        zIndex: '-1'\r\n    }\r\n}\r\n\r\nexport default LoadingPage;",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":205,"column":10,"nodeType":"49","endLine":205,"endColumn":99},{"ruleId":"47","severity":1,"message":"48","line":226,"column":21,"nodeType":"49","endLine":226,"endColumn":107},{"ruleId":"43","replacedBy":"50"},{"ruleId":"45","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":3,"column":8,"nodeType":"54","messageId":"55","endLine":3,"endColumn":20},{"ruleId":"52","severity":1,"message":"56","line":4,"column":8,"nodeType":"54","messageId":"55","endLine":4,"endColumn":25},{"ruleId":"57","severity":1,"message":"58","line":73,"column":13,"nodeType":"59","messageId":"60","endLine":73,"endColumn":26},{"ruleId":"52","severity":1,"message":"61","line":5,"column":9,"nodeType":"54","messageId":"55","endLine":5,"endColumn":22},{"ruleId":"57","severity":1,"message":"58","line":15,"column":17,"nodeType":"59","messageId":"60","endLine":15,"endColumn":30},{"ruleId":"47","severity":1,"message":"48","line":37,"column":25,"nodeType":"49","endLine":37,"endColumn":96},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["62"],["63"],"no-unused-vars","'ToggleButton' is defined but never used.","Identifier","unusedVar","'ToggleButtonGroup' is defined but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'CSSTransition' is defined but never used.","no-global-assign","no-unsafe-negation"]